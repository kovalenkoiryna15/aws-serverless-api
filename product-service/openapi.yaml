openapi: 3.0.3
info:
  title: Awesome Store - REST API
  version: 1.0.0
servers: 
  - url: https://dgoalnfcfd.execute-api.eu-west-1.amazonaws.com/prod/
tags:
  - name: products
paths:
  /products:
    get:
      tags:
        - products
      summary: List all products
      operationId: getProductsList
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableProduct'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - products
      summary: Create product
      operationId: createProduct
      requestBody:
        description: Create a new product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailableProductInput'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableProduct'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{product_id}:
    get:
      tags:
        - products
      summary: Find product by ID
      operationId: getProductById
      description: Returns a single product
      parameters:
        - name: product_id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableProduct'
        '400':
          description: Product id was not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - products
      summary: Update product by ID
      operationId: updateProduct
      description: Updates an existing product
      parameters:
        - name: product_id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: string
      requestBody:
        description: Create a new product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailableProductInput'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableProduct'
        '400':
          description: Product id was not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    AvailableProduct:
      type: object
      properties:
        price:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: Kenya Kiringa Coffee
        description:
          type: string
          example: Like all Kenyan coffees, our Kiringa has a clean, fruity flavour and a subtle sweetness.
        id:
          type: string
          example: kenya-kiringa
        image:
          type: string
          example: https://rss-products-assets.s3.eu-west-1.amazonaws.com/default.jpg
    AvailableProductInput:
      type: object
      properties:
        title:
          type: string
          example: Coffee 1
        description:
          type: string
          example: This is my awesome coffee description.
        price:
          type: integer
          format: int64
          example: 25
        count:
          type: integer
          format: int64
          example: 10
        image:
          type: string
          example: https://rss-products-assets.s3.eu-west-1.amazonaws.com/default.jpg
    Error:
      type: object
      properties:
        message:
          type: string
